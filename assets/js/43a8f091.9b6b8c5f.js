"use strict";(self.webpackChunkb14_docs=self.webpackChunkb14_docs||[]).push([[739],{4278:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"telemetry-ingestion/docker-compose-example","title":"Docker Compose Example","description":"This guide demonstrates how to configure Docker container log collection using the OpenTelemetry Collector and forward those logs to Scout. We\'ll use Docker Compose to set up both a sample application and the collector.","source":"@site/docs/telemetry-ingestion/docker-compose-example.md","sourceDirName":"telemetry-ingestion","slug":"/telemetry-ingestion/docker-compose-example","permalink":"/telemetry-ingestion/docker-compose-example","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Otel Collector Binary Example","permalink":"/telemetry-ingestion/otelcol-binary-example"},"next":{"title":"Kubernetes Helm Setup","permalink":"/telemetry-ingestion/kubernetes-helm-setup"}}');var r=o(4848),i=o(8453);const s={sidebar_position:2},l="Docker Compose Example",c={},a=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Overview",id:"overview",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Docker Compose Configuration",id:"docker-compose-configuration",level:3},{value:"Collector Configuration",id:"collector-configuration",level:3}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"docker-compose-example",children:"Docker Compose Example"})}),"\n",(0,r.jsx)(n.p,{children:"This guide demonstrates how to configure Docker container log collection using the OpenTelemetry Collector and forward those logs to Scout. We'll use Docker Compose to set up both a sample application and the collector."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"Docker and Docker Compose installed on your system\nA Scout account with access credentials"}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The OpenTelemetry Collector's file logs receiver component enables collection of Docker container logs. When properly configured, the collector will:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Monitor container log files"}),"\n",(0,r.jsx)(n.li,{children:"Process and transform the logs"}),"\n",(0,r.jsx)(n.li,{children:"Forward them to your Scout instance"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"The following example uses Docker Compose to create a complete logging pipeline with a sample application and the OpenTelemetry Collector."}),"\n",(0,r.jsx)(n.h3,{id:"docker-compose-configuration",children:"Docker Compose Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Following is a sample docker-compose.yml file that sets up a sample application that uses redis as a component and the OpenTelemetry Collector."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'\nversion: \'3.8\'\n\nx-default-logging: &logging\n driver: "json-file"\n options:\n   max-size: "5m"\n   max-file: "2"\n   tag: "{{.Name}}|{{.ImageName}}|{{.ID}}"\n\nservices:\n  web:\n    build: .\n    command: poetry run uvicorn demo.main:app --host 0.0.0.0 --port 8000 --reload\n    volumes:\n      - .:/demo\n    ports:\n      - "8000:8000"\n    environment:\n      - REDIS_HOST=redis\n      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4320\n    depends_on:\n      redis:\n        condition: service_healthy\n    healthcheck:\n      test: ["CMD", "curl", "-f", "localhost:8000/ping"]\n    logging: *logging\n\n  redis:\n    image: redis:6\n    ports:\n      - "6379:6379"\n    logging: *logging\n    healthcheck:\n      test: ["CMD", "redis-cli", "ping"]\n\n\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:0.119.0\n    container_name: otel-collector\n    deploy:\n      resources:\n        limits:\n          memory: 200M\n    restart: unless-stopped\n    command: [ "--config=/etc/otelcol-config.yaml"]\n    user: 0:0\n    volumes:\n      - /:/hostfs:ro\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\n      - ./config:/etc/\n    ports:\n      - "4319:4319"\n      - "4318:4318"\n      - "55679:55679"  # zpages: http://localhost:55679/debug/tracez\n    logging: *logging\nvolumes:\n  postgres_data:\n'})}),"\n",(0,r.jsx)(n.h3,{id:"collector-configuration",children:"Collector Configuration"}),"\n",(0,r.jsx)(n.p,{children:"OpenTelemetry Collector is configured to"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Monitor Redis metrics"}),"\n",(0,r.jsx)(n.li,{children:"Monitor logs for all containers using json logs driver and filereciver"}),"\n",(0,r.jsx)(n.li,{children:"Collect telemetry data into otel-collector container and then forward them to Scout using an otlp exporter"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"\nextensions:\n  zpages:\n    endpoint: 0.0.0.0:55679\n  oauth2client:\n    client_id: demo\n    client_secret: 01JM94R5DPSZXBGK5QA4D329N5\n    endpoint_params:\n      audience: b14collector\n    token_url: https://id.b14.dev/realms/playground/protocol/openid-connect/token\n    tls:\n      insecure_skip_verify: true\n\nexporters:\n  debug:\n  otlphttp/b14:\n    endpoint: https://otel.play.b14.dev/01jm94npk4h8ys63x1kzw2bjes/otlp\n    auth:\n      authenticator: oauth2client\n    tls:\n      insecure_skip_verify: true\n\nprocessors:\n  batch:\n    timeout: 1s\n    send_batch_size: 1024\n\n  resource:\n    attributes:\n    - key: service.name\n      value: ${env:SERVICE_NAME}\n      action: upsert\n\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: 0.0.0.0:4320\n\n  filelog:\n    include:\n    - /var/lib/docker/containers/*/*-json.log\n    operators:\n    - id: parser-docker\n      timestamp:\n        layout: '%Y-%m-%dT%H:%M:%S.%LZ'\n        parse_from: attributes.time\n      type: json_parser\n    - field: attributes.time\n      type: remove\n    - id: extract_metadata_from_docker_tag\n      parse_from: attributes.attrs.tag\n      regex: ^(?P<name>[^\\|]+)\\|(?P<image_name>[^\\|]+)\\|(?P<id>[^$]+)$\n      type: regex_parser\n      if: 'attributes?.attrs?.tag != nil'\n    - from: attributes.name\n      to: resource[\"docker.container.name\"]\n      type: move\n      if: 'attributes?.name != nil'\n    - from: attributes.image_name\n      to: resource[\"docker.image.name\"]\n      type: move\n      if: 'attributes?.image_name != nil'\n    - from: attributes.id\n      to: resource[\"docker.container.id\"]\n      type: move\n      if: 'attributes?.id != nil'\n    - from: attributes.log\n      to: body\n      type: move\n\n\n  docker_stats:\n    endpoint: unix:///var/run/docker.sock\n    collection_interval: 20s\n\n  redis:\n    endpoint: \"redis:6379\"\n    collection_interval: 20s\n\nservice:\n  extensions: [ oauth2client, zpages ]\n  pipelines:\n    traces:\n      receivers: [ otlp ]\n      processors: [ batch ]\n      exporters: [ otlphttp/b14, debug ]\n    metrics:\n      receivers: [ otlp, postgresql, redis, rabbitmq, docker_stats ]\n      processors: [ batch ]\n      exporters: [ otlphttp/b14, debug ]\n    logs:\n      receivers: [ otlp, filelog ]\n      processors: [ batch ]\n      exporters: [ otlphttp/b14, debug ]\n  telemetry:\n    logs:\n      level: info\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>l});var t=o(6540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);