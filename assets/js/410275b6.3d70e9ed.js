"use strict";(self.webpackChunkb_14_docs=self.webpackChunkb_14_docs||[]).push([[400],{7960:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"telemetry-ingestion/kubernetes-helm-setup","title":"Kubernetes Helm Setup","description":"This guide demonstrates how to configure Scout\'s OpenTelemetry Collector to collect logs, metrics and traces from Kubernetes pods and forward them to Scout. We\'ll use Helm to install the collector and configure it to collect the telemetry from all pods in the all the namespaces (except the configured system kube-system).","source":"@site/docs/telemetry-ingestion/kubernetes-helm-setup.md","sourceDirName":"telemetry-ingestion","slug":"/telemetry-ingestion/kubernetes-helm-setup","permalink":"/docs/telemetry-ingestion/kubernetes-helm-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/base14io/docs/edit/main/docs/telemetry-ingestion/kubernetes-helm-setup.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Docker Compose Example","permalink":"/docs/telemetry-ingestion/docker-compose-example"}}');var o=n(4848),l=n(8453);const a={sidebar_position:3},r="Kubernetes Helm Setup",c={},i=[{value:"Install the Helm Chart",id:"install-the-helm-chart",level:2},{value:"Detailed configuration via values.yaml",id:"detailed-configuration-via-valuesyaml",level:2}];function u(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"kubernetes-helm-setup",children:"Kubernetes Helm Setup"})}),"\n",(0,o.jsx)(t.p,{children:"This guide demonstrates how to configure Scout's OpenTelemetry Collector to collect logs, metrics and traces from Kubernetes pods and forward them to Scout. We'll use Helm to install the collector and configure it to collect the telemetry from all pods in the all the namespaces (except the configured system kube-system)."}),"\n",(0,o.jsx)(t.h2,{id:"install-the-helm-chart",children:"Install the Helm Chart"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"helm repo add base14 https://charts.base14.io/\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"helm install scout base14/scout-collector --namespace scout --create-namespace -f values.yaml\n"})}),"\n",(0,o.jsx)(t.h2,{id:"detailed-configuration-via-valuesyaml",children:"Detailed configuration via values.yaml"}),"\n",(0,o.jsx)(t.p,{children:"Following is an example of a values.yaml file that can be used to configure scout colllector."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:"\nscout:\n  endpoint: __YOUR_ENDPOINT__\n  token_url: __YOUR_TOKEN_URL__\n  app_name: __YOUR_APP_NAME__\n  api_key: __YOUR_API_KEY__\n  distribution: EKS # or GKE, AKS, EKS\n  metrics:\n    apps:\n      enabled: true\n      endpoints:\n        - name: app1\n          target: app1.app1.svc.cluster.local:9131\n          collectionInterval: 60s\n        - name: haproxy\n          collectionInterval: 60s\n          target: haproxy.gateway.svc.cluster.local\n"})})]})}function d(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(6540);const o={},l=s.createContext(o);function a(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);