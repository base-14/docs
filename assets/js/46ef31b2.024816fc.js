"use strict";(self.webpackChunkb_14_docs=self.webpackChunkb_14_docs||[]).push([[508],{4138:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"telemetry-ingestion/otelcol-binary-example","title":"Otel Collector Binary Example","description":"Install the collector binary","source":"@site/docs/telemetry-ingestion/otelcol-binary-example.md","sourceDirName":"telemetry-ingestion","slug":"/telemetry-ingestion/otelcol-binary-example","permalink":"/docs/telemetry-ingestion/otelcol-binary-example","draft":false,"unlisted":false,"editUrl":"https://github.com/base14io/docs/edit/main/docs/telemetry-ingestion/otelcol-binary-example.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Telelemetry Ingestion","permalink":"/docs/category/telelemetry-ingestion"},"next":{"title":"Docker Compose Example","permalink":"/docs/telemetry-ingestion/docker-compose-example"}}');var l=t(4848),r=t(8453);const a={sidebar_position:1},i="Otel Collector Binary Example",s={},c=[{value:"Install the collector binary",id:"install-the-collector-binary",level:2},{value:"Example configuration",id:"example-configuration",level:2},{value:"Running the collector",id:"running-the-collector",level:2},{value:"Run an app",id:"run-an-app",level:2},{value:"View logs in Scout",id:"view-logs-in-scout",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"otel-collector-binary-example",children:"Otel Collector Binary Example"})}),"\n",(0,l.jsx)(n.h2,{id:"install-the-collector-binary",children:"Install the collector binary"}),"\n",(0,l.jsxs)(n.p,{children:["The collector binary can be downloaded from the ",(0,l.jsx)(n.a,{href:"https://github.com/open-telemetry/opentelemetry-collector-releases/releases",children:"releases page"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"An example of how to download and extract the collector binary is shown below for macos arm64."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"\ncurl --proto '=https' --tlsv1.2 -fOL https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.119.0/otelcol_0.119.0_darwin_arm64.tar.gz\ntar -xvf otelcol_0.119.0_darwin_arm64.tar.gz\n"})}),"\n",(0,l.jsx)(n.h2,{id:"example-configuration",children:"Example configuration"}),"\n",(0,l.jsx)(n.p,{children:"An example config can be seen to collect logs from a file to export to Scout"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'\nextensions:\n  oauth2client:\n    client_id: demo\n    client_secret: 01JM94R5DPSZXBGK5QA4D329N5\n    endpoint_params:\n      audience: b14collector\n    token_url: https://id.b14.dev/realms/playground/protocol/openid-connect/token\n\nexporters:\n  debug:\n  otlphttp/auth:\n    endpoint: https://otel.play.b14.dev/01jm94npk4h8ys63x1kzw2bjes/otlp\n    auth:\n      authenticator: oauth2client\n\nprocessors:\n  batch:\n    redaction:\n      blocked_values:\n         - "(5[1-5][0-9]{14})"       ## MasterCard number\n       summary: debug\n\nreceivers:\n  # Data sources: traces, metrics, logs\n  filelog:\n    include: [ "app.log" ]\n\nservice:\n  extensions: [ oauth2client ]\n  pipelines:\n    logs:\n      receivers: [ filelog ]\n      processors: [ batch ]\n      exporters: [ otlphttp/auth, debug ]\n'})}),"\n",(0,l.jsx)(n.h2,{id:"running-the-collector",children:"Running the collector"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"\n./otelcol --config ./config.yaml\n"})}),"\n",(0,l.jsx)(n.h2,{id:"run-an-app",children:"Run an app"}),"\n",(0,l.jsx)(n.p,{children:"Run the app and redirect the output to a file app.log which is being watched by the collector."}),"\n",(0,l.jsx)(n.p,{children:"As an example we can use the following node app."}),"\n",(0,l.jsx)(n.p,{children:"install structured logging library"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npm install pino\n"})}),"\n",(0,l.jsx)(n.p,{children:"use the logger to log some messages"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js,",metastring:"main.js",children:"\nconst logger = require('pino')()\n\nlogger.info('hello world')\n\nconst child = logger.child({ a: 'property' })\nchild.info('hello child!')\n"})}),"\n",(0,l.jsx)(n.p,{children:"run the app and redirect the output to a file app.log"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"node main.js > app.log\n"})}),"\n",(0,l.jsx)(n.h2,{id:"view-logs-in-scout",children:"View logs in Scout"}),"\n",(0,l.jsx)(n.p,{children:"Open the Scout UI and navigate to the Logs tab. You should see the logs from the app."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(6540);const l={},r=o.createContext(l);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);